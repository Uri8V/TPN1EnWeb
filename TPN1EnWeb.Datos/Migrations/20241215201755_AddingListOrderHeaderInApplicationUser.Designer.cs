// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPN1EnWeb.Datos;

#nullable disable

namespace TPN1EnWeb.Datos.Migrations
{
    [DbContext(typeof(ShoesDbContext))]
    [Migration("20241215201755_AddingListOrderHeaderInApplicationUser")]
    partial class AddingListOrderHeaderInApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandName")
                        .IsUnique();

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Active = true,
                            BrandName = "Nike"
                        },
                        new
                        {
                            BrandId = 2,
                            Active = true,
                            BrandName = "Adidas"
                        },
                        new
                        {
                            BrandId = 3,
                            Active = true,
                            BrandName = "Puma"
                        });
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Colour", b =>
                {
                    b.Property<int>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColourId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ColourId");

                    b.HasIndex("ColorName")
                        .IsUnique();

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            ColourId = 1,
                            Active = true,
                            ColorName = "Lila"
                        },
                        new
                        {
                            ColourId = 2,
                            Active = true,
                            ColorName = "Violeta"
                        },
                        new
                        {
                            ColourId = 3,
                            Active = true,
                            ColorName = "Purpura"
                        });
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("GenreId");

                    b.HasIndex("GenreName")
                        .IsUnique();

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Masculino"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Femenino"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Unisex"
                        });
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderHeaderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderHeaderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Shoe", b =>
                {
                    b.Property<int>("ShoeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoeId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColourId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal (10,2)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColourId");

                    b.HasIndex("GenreId");

                    b.HasIndex("SportId");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ShoeSizes", b =>
                {
                    b.Property<int>("ShoeSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoeSizeId"));

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("StockInCarts")
                        .HasColumnType("int");

                    b.HasKey("ShoeSizeId");

                    b.HasIndex("ShoeId");

                    b.HasIndex("ShoeSizeId")
                        .IsUnique();

                    b.HasIndex("SizeId", "ShoeId")
                        .IsUnique();

                    b.ToTable("ShoeSizes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<decimal>("SizeNumber")
                        .HasColumnType("decimal (3,1)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeNumber = 28m
                        },
                        new
                        {
                            SizeId = 2,
                            SizeNumber = 28.5m
                        },
                        new
                        {
                            SizeId = 3,
                            SizeNumber = 29m
                        },
                        new
                        {
                            SizeId = 4,
                            SizeNumber = 29.5m
                        },
                        new
                        {
                            SizeId = 5,
                            SizeNumber = 30m
                        },
                        new
                        {
                            SizeId = 6,
                            SizeNumber = 30.5m
                        },
                        new
                        {
                            SizeId = 7,
                            SizeNumber = 31m
                        },
                        new
                        {
                            SizeId = 8,
                            SizeNumber = 31.5m
                        },
                        new
                        {
                            SizeId = 9,
                            SizeNumber = 32m
                        },
                        new
                        {
                            SizeId = 10,
                            SizeNumber = 32.5m
                        },
                        new
                        {
                            SizeId = 11,
                            SizeNumber = 33m
                        },
                        new
                        {
                            SizeId = 12,
                            SizeNumber = 33.5m
                        },
                        new
                        {
                            SizeId = 13,
                            SizeNumber = 34m
                        },
                        new
                        {
                            SizeId = 14,
                            SizeNumber = 34.5m
                        },
                        new
                        {
                            SizeId = 15,
                            SizeNumber = 35m
                        },
                        new
                        {
                            SizeId = 16,
                            SizeNumber = 35.5m
                        },
                        new
                        {
                            SizeId = 17,
                            SizeNumber = 36m
                        },
                        new
                        {
                            SizeId = 18,
                            SizeNumber = 36.5m
                        },
                        new
                        {
                            SizeId = 19,
                            SizeNumber = 37m
                        },
                        new
                        {
                            SizeId = 20,
                            SizeNumber = 37.5m
                        },
                        new
                        {
                            SizeId = 21,
                            SizeNumber = 38m
                        },
                        new
                        {
                            SizeId = 22,
                            SizeNumber = 38.5m
                        },
                        new
                        {
                            SizeId = 23,
                            SizeNumber = 39m
                        },
                        new
                        {
                            SizeId = 24,
                            SizeNumber = 39.5m
                        },
                        new
                        {
                            SizeId = 25,
                            SizeNumber = 40m
                        },
                        new
                        {
                            SizeId = 26,
                            SizeNumber = 40.5m
                        },
                        new
                        {
                            SizeId = 27,
                            SizeNumber = 41m
                        },
                        new
                        {
                            SizeId = 28,
                            SizeNumber = 41.5m
                        },
                        new
                        {
                            SizeId = 29,
                            SizeNumber = 42m
                        },
                        new
                        {
                            SizeId = 30,
                            SizeNumber = 42.5m
                        },
                        new
                        {
                            SizeId = 31,
                            SizeNumber = 43m
                        },
                        new
                        {
                            SizeId = 32,
                            SizeNumber = 43.5m
                        },
                        new
                        {
                            SizeId = 33,
                            SizeNumber = 44m
                        },
                        new
                        {
                            SizeId = 34,
                            SizeNumber = 44.5m
                        },
                        new
                        {
                            SizeId = 35,
                            SizeNumber = 45m
                        },
                        new
                        {
                            SizeId = 36,
                            SizeNumber = 45.5m
                        },
                        new
                        {
                            SizeId = 37,
                            SizeNumber = 46m
                        },
                        new
                        {
                            SizeId = 38,
                            SizeNumber = 46.5m
                        },
                        new
                        {
                            SizeId = 39,
                            SizeNumber = 47m
                        },
                        new
                        {
                            SizeId = 40,
                            SizeNumber = 47.5m
                        },
                        new
                        {
                            SizeId = 41,
                            SizeNumber = 48m
                        },
                        new
                        {
                            SizeId = 42,
                            SizeNumber = 48.5m
                        },
                        new
                        {
                            SizeId = 43,
                            SizeNumber = 49m
                        },
                        new
                        {
                            SizeId = 44,
                            SizeNumber = 49.5m
                        },
                        new
                        {
                            SizeId = 45,
                            SizeNumber = 50m
                        });
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SportId");

                    b.HasIndex("SportName")
                        .IsUnique();

                    b.ToTable("Sports", (string)null);

                    b.HasData(
                        new
                        {
                            SportId = 1,
                            Active = true,
                            SportName = "Futbol"
                        },
                        new
                        {
                            SportId = 2,
                            Active = true,
                            SportName = "Voley"
                        },
                        new
                        {
                            SportId = 3,
                            Active = true,
                            SportName = "Hokey"
                        });
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.City", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.OrderDetail", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.ShoeSizes", "ShoeSizes")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("ShoeSizes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.OrderHeader", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.ApplicationUser", "ApplicationUser")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Shoe", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.Brand", "Brands")
                        .WithMany("Shoes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Colour", "Color")
                        .WithMany("Shoes")
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Genre", "Genres")
                        .WithMany("Shoes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Sport", "Sports")
                        .WithMany("Shoes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Color");

                    b.Navigation("Genres");

                    b.Navigation("Sports");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ShoeSizes", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.Shoe", "Shoe")
                        .WithMany("ShoeSize")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Size", "Size")
                        .WithMany("ShoeSize")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ShoppingCart", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.ShoeSizes", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.State", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ApplicationUser", b =>
                {
                    b.HasOne("TPN1EnWeb.Entidades.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPN1EnWeb.Entidades.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Brand", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Colour", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Genre", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.OrderHeader", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Shoe", b =>
                {
                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Size", b =>
                {
                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.Sport", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("TPN1EnWeb.Entidades.ApplicationUser", b =>
                {
                    b.Navigation("OrderHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
